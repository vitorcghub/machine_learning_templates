# -*- coding: utf-8 -*-
"""simple_linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s89L3MTK21klVbDz5k9B_AlRcmN4QT48

# Simple Linear Regression

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('Salary_Data.csv')
X = dataset.iloc[:,:-1].values
y = dataset.iloc[:, -1].values

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

"""## Training the Simple Linear Regression model on the Training set"""

from sklearn.linear_model import LinearRegression #LinearRgeression eh uma classe
regressor = LinearRegression() #regressor eh um objeto (ou instancia) da classe LinearRegression
regressor.fit(X_train, y_train) #fit eh um metodo da classe LinearRegression

"""## Predicting the Test set results"""

y_pred = regressor.predict(X_test) #aqui estamos prevendo os salarios com base nos anos de experiencia

"""## Visualising the Training set results"""

plt.scatter(X_train, y_train, color = 'red')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('Salary vs Experience [Training Set]')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

"""## Visualising the Test set results"""

plt.scatter(X_test, y_test, color = 'red')
plt.plot(X_train, regressor.predict(X_train), color = 'blue') #a reta de regresao do modelo vale para o training set e para o test set
plt.title('Salary vs Experience [Test Set]')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

"""## Making a single prediction"""

print(regressor.predict([[12]]))

"""## Getting coefficients"""

print(regressor.coef_)
print(regressor.intercept_)