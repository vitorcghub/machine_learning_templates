# -*- coding: utf-8 -*-
"""data_preprocessing_tools.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1712arVg9H2DPqkzXBGYbXMp0xSTChdsg

# Data Preprocessing Tools

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

#criar uma nova variavel que contem o dataset
dataset = pd.read_csv('Data.csv')
#criar matriz de features e vetor de variavel dependente
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values #para pegar so a ultima coluna

print(X)

print(y)

"""## Taking care of missing data"""

#temos que remover dados faltando para nao dar erros no treinamento
#vamos substituir o nan pela media de todos os salarios
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean') #imputer eh um objeto da classe SimpleImputer
imputer.fit(X[:, 1:3])  #o metodo fit vai colocar o objeto imputer nas colunas onde existir nan (colunas 2 e 3)
X[:, 1:3] = imputer.transform(X[:, 1:3])

print(X)

"""## Encoding categorical data

### Encoding the Independent Variable
"""

#temos que transformar a coluna dos paises (variaveis categoricas) em vetores linearmente independentes
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

print(X)

"""### Encoding the Dependent Variable"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y) #nao precisa ser numpy array pq eh variavel dependente

print(y)

"""## Splitting the dataset into the Training set and Test set"""

#Training set eh o conjunto onde vc treina o algoritmo com base nos dados que vc tem
#Test set eh o conjunto onde vc faz previsoes
#vamos criar dois pares de conjuntos: um para o training e outro para o test
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1) #tamanho indicado para divisao: 80% p/ training e 20% p/ test feitos aleatoriamente

print(X_train)

print(X_test)

print(y_train)

print(y_test)

"""## Feature Scaling"""

#qual tipo de feature scaling usar? normalisation ou standardisation? 
#normalisation eh mais usado para dados que seguem uma distribui√ßao normal, e standardisation pode ser usado de maneira mais geral
from sklearn.preprocessing import StandardScaler #standardisation
sc = StandardScaler()
#nao fazemos feature scaling para as dummy variables (os vetores correspondentes aos paises)
X_train[:, 3:] = sc.fit_transform(X_train[:, 3:]) #da coluna 3 ate o fim
X_test[:, 3:] = sc.transform(X_test[:, 3:]) #deve ser a mesma escala usada no training set

print(X_train)

print(X_test)